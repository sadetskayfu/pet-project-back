generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  email           String           @unique @db.VarChar(64)
  displayName     String?          @unique @db.VarChar(32)
  avatarUrl       String?
  hash            String
  salt            String
  isConfirmed     Boolean          @default(false)
  createdAt       DateTime         @default(now())
  countryCode     String           @db.VarChar(2)
  totalReviews    Int              @default(0)
  confirmationIds Confirmation[]
  profile         Profile?
  roles           Role[]
  reviews         Review[]
  comments        Comment[]
  reviewLikes     ReviewLike[]
  commentLikes    CommentLike[]
  reviewDislikes  ReviewDislike[]
  commentDislikes CommentDislike[]
  watchedMovies   WatchedMovie[]
  wishedMovies    WishedMovie[]

  country Country @relation(fields: [countryCode], references: [code])
}

model Confirmation {
  id        Int      @id @default(autoincrement())
  userId    Int
  code      String
  salt      String
  timeValid Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model ReviewLike {
  id       Int @id @default(autoincrement())
  userId   Int
  reviewId Int

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@unique([userId, reviewId])
}

model CommentLike {
  id        Int @id @default(autoincrement())
  userId    Int
  commentId Int

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
}

model ReviewDislike {
  id       Int @id @default(autoincrement())
  userId   Int
  reviewId Int

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@unique([userId, reviewId])
}

model CommentDislike {
  id        Int @id @default(autoincrement())
  userId    Int
  commentId Int

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
}

model Comment {
  id            Int              @id @default(autoincrement())
  message       String           @db.Text
  userId        Int
  reviewId      Int
  likes         CommentLike[]
  totalLikes    Int              @default(0)
  dislikes      CommentDislike[]
  totalDislikes Int              @default(0)
  isChanged     Boolean          @default(false)
  createdAt     DateTime         @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}

model Review {
  id            Int             @id @default(autoincrement())
  message       String          @db.Text
  rating        Float
  userId        Int
  movieId       Int
  comments      Comment[]
  totalComments Int             @default(0)
  likes         ReviewLike[]
  totalLikes    Int             @default(0)
  dislikes      ReviewDislike[]
  totalDislikes Int             @default(0)
  isChanged     Boolean         @default(false)
  createdAt     DateTime        @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@unique([userId, movieId])
}

model Profile {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique
  firstName String?   @db.VarChar(32)
  lastName  String?   @db.VarChar(32)
  birthDate DateTime?
  gender    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Country {
  code   String           @id @unique @db.VarChar(2)
  label  String           @unique
  users  User[]
  movies MovieCountries[]
}

model Genre {
  id    Int          @id @default(autoincrement())
  name  String       @unique
  movie MovieGenre[]
}

model Actor {
  id        Int           @id @default(autoincrement())
  firstName String        @db.VarChar(32)
  lastName  String        @db.VarChar(32)
  birthDate DateTime
  photoUrl  String?
  movies    MovieActors[]
}

model Movie {
  id           Int              @id @default(autoincrement())
  title        String
  description  String
  ageLimit     Int
  releaseDate  DateTime
  releaseYear  Int
  rating       Float            @default(0.0)
  totalReviews Int              @default(0)
  duration     Int
  cardImgUrl   String
  videoUrl     String
  trailerUrl   String
  posterUrl    String
  countries    MovieCountries[]
  genres       MovieGenre[]
  reviews      Review[]
  actors       MovieActors[]
  watchedBy    WatchedMovie[]
  wishedBy     WishedMovie[]
}

model MovieCountries {
  movieId     Int
  countryCode String

  movie   Movie   @relation(fields: [movieId], references: [id], onDelete: Cascade)
  country Country @relation(fields: [countryCode], references: [code], onDelete: Cascade)

  @@id([movieId, countryCode])
}

model MovieActors {
  movieId Int
  actorId Int

  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)
  actor Actor @relation(fields: [actorId], references: [id], onDelete: Cascade)

  @@id([movieId, actorId])
}

model MovieGenre {
  movieId Int
  genreId Int

  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)
  genre Genre @relation(fields: [genreId], references: [id], onDelete: Cascade)

  @@id([movieId, genreId])
}

model WatchedMovie {
  userId  Int
  movieId Int
  addedAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@unique([userId, movieId])
}

model WishedMovie {
  userId  Int
  movieId Int
  addedAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@unique([userId, movieId])
}
