generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UnconfirmedUser {
  id                        Int       @id @default(autoincrement())
  email                     String    @unique @db.VarChar(64)
  hash                      String
  salt                      String
  countryCode               String    @db.VarChar(2)
  createdAt                 DateTime  @default(now())
}

model User {
  id                        Int             @id @default(autoincrement())
  email                     String          @unique @db.VarChar(64)
  hash                      String
  salt                      String
  createdAt                 DateTime        @default(now())
  countryCode               String          @db.VarChar(2)
  confirmationIds           Confirmation[]
  profile                   Profile?
  roles                     Role[]
  reviews                   Review[]
  comments                  Comment[]
  reviewLikes               ReviewLike[]
  commentLikes              CommentLike[]
  watchedMovies             WatchedMovie[]
  wishListMovies            WishListMovie[]

  country Country @relation(fields: [countryCode], references: [code])
}

model Confirmation {
  id        Int      @id @default(autoincrement())
  userId    Int      
  code      String
  salt      String
  timeValid Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model ViewedMoviesByUser {
  id      Int @id @default(autoincrement())
  userId  Int
  movieId Int
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model ReviewLike {
  id       Int @id @default(autoincrement())
  userId   Int @unique
  reviewId Int @unique

  user   User   @relation(fields: [userId], references: [id])
  review Review @relation(fields: [reviewId], references: [id])
}

model CommentLike {
  id        Int @id @default(autoincrement())
  userId    Int @unique
  commentId Int @unique

  user    User    @relation(fields: [userId], references: [id])
  comment Comment @relation(fields: [commentId], references: [id])
}

model Comment {
  id         Int           @id @default(autoincrement())
  message    String        @db.VarChar(255)
  userId     Int
  reviewId   Int
  likes      CommentLike[]
  totalLikes Int           @default(0)
  isChanged  Boolean       @default(false)
  createdAt  DateTime      @default(now())

  user   User   @relation(fields: [userId], references: [id])
  review Review @relation(fields: [reviewId], references: [id])
}

model Review {
  id            Int          @id @default(autoincrement())
  message       String       @db.VarChar(255)
  rating        Float
  userId        Int          @unique
  movieId       Int          @unique
  comments      Comment[]
  totalComments Int          @default(0)
  likes         ReviewLike[]
  totalLikes    Int          @default(0)
  isChanged     Boolean      @default(false)
  createdAt     DateTime     @default(now())

  user  User  @relation(fields: [userId], references: [id])
  movie Movie @relation(fields: [movieId], references: [id])
}

model Profile {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique
  firstName String?   @db.VarChar(32)
  lastName  String?   @db.VarChar(32)
  birthDate DateTime?
  gender    String?   @db.VarChar(5)

  user User @relation(fields: [userId], references: [id])
}

model Country {
  code   String  @id @unique @db.VarChar(2)
  name   String  @unique
  users  User[]
  movies Movie[]
}

model Genre {
  id    Int          @id @default(autoincrement())
  name  String       @unique
  movie MovieGenre[]
}

model Actor {
  id        Int           @id @default(autoincrement())
  firstName String        @db.VarChar(32)
  lastName  String        @db.VarChar(32)
  birthDate DateTime
  photoUrl  String?
  movies    MovieActors[]
}

model Movie {
  id           Int             @id @default(autoincrement())
  title        String
  description  String
  ageLimit     Int
  releaseData  DateTime
  releaseYear  Int
  countryCode  String          @db.VarChar(2)
  rating       Float           @default(0.0)
  totalReviews Int             @default(0)
  duration     Int
  cardImgUrl   String
  genres       MovieGenre[]
  reviews      Review[]
  actors       MovieActors[]
  watchedBy    WatchedMovie[]
  wishListedBy WishListMovie[]

  country Country @relation(fields: [countryCode], references: [code])
}

model MovieActors {
  movieId Int
  actorId Int

  movie Movie @relation(fields: [movieId], references: [id])
  actor Actor @relation(fields: [actorId], references: [id])

  @@id([movieId, actorId])
}

model MovieGenre {
  movieId Int
  genreId Int

  movie Movie @relation(fields: [movieId], references: [id])
  genre Genre @relation(fields: [genreId], references: [id])

  @@id([movieId, genreId])
}

model WatchedMovie {
  userId    Int
  movieId   Int
  watchedAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  movie Movie @relation(fields: [movieId], references: [id])

  @@unique([userId, movieId])
}

model WishListMovie {
  userId  Int
  movieId Int
  addedAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  movie Movie @relation(fields: [movieId], references: [id])

  @@unique([userId, movieId])
}
